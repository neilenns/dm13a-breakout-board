name: "Release"

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Design version"
        required: true
        default: "pre-release"

permissions:
  contents: write # Required to push changes to the repo
  pull-requests: write

env:
  outputFolder: "release"
  projectName: "${{ github.event.repository.name }}"
  date: "not set" # This gets set by the date step
  shortSHA: "not set" # This gets set by a step in the workflow
  version: "not set" # This gets set by the get_github_version or workflow_dispatch input
  Timezone: "America/Los_Angeles"

jobs:
  FabricationAndDocumentation:
    runs-on: ubuntu-latest
    container: ghcr.io/neilenns/kicad:latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mark repository as safe for git commands
        run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      # ------------------------------
      # Variable preparation
      # ------------------------------

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Get the version of the GitHub release for use later. This is only valid
      # when run in a release context.
      - name: Get short commit hash
        run: echo "shortSHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get GitHub release version
        id: get_github_version
        uses: dhkatz/get-version-action@v3.0.0
        if: ${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Store GitHub release version
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo "version=${{ steps.get_github_version.outputs.version }} (${{ env.shortSHA }})" >> $GITHUB_ENV

      # Stores the provided version from a manual run of the workflow in the environment variable
      # so it is available to the rest of the workflow.
      - name: Store GitHub release version
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "version=${{ inputs.version }} (${{ env.shortSHA }})" >> $GITHUB_ENV

      # Update variables in the project file since variables can't be set on the job command.
      - name: Update project variables
        uses: restackio/update-json-file-action@2.1
        with:
          file: ${{ env.projectName }}.kicad_pro
          fields: '{"text_variables.DATE": "${{ env.DATE }}", "text_variables.VERSION": "${{ env.version }}"}'

      # ------------------------------
      # Output generation
      # ------------------------------

      # Run the KiCad jobset.
      - name: Run KiCad jobset
        run: |
          mkdir -p release/JLCPCB
          kicad-cli jobset run --file jobs.kicad_jobset ${{ env.projectName }}.kicad_pro

      # ------------------------------
      # --- JLCPCB submissions cleanup
      # ------------------------------

      # Fix the headers in the position files.
      - name: JLCPCB - Update position file headers
        run: >
          sed -i 
          's/Ref,Val,Package,PosX,PosY,Rot,Side/Designator,Val,Package,Mid X,Mid Y,Rotation,Layer/'
          ${{ env.outputFolder }}/JLCPCB/${{ env.projectName }}-all-pos.csv

      - name: JLCPCB - Zip upload file
        run: |
          cd ${{ env.outputFolder}}/JLCPCB
          zip -r ../${{ env.projectName }}-JLCPCB.zip .
          cd ..
          rm -rf JLCPCB

      # ------------------------------
      # Asset upload
      # ------------------------------

      - name: Create a PR for the doc images
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          title: Update readme images
          branch: create-pull-request/update-doc-images
          base: main
          labels: ignore-for-release-notes
          add-paths: |
            docs/*.png

      - name: Automerge the pull request
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: gh pr merge --squash --auto "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the files to the release if this is an actual release.
      - name: Upload release files
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.outputFolder }}/${{ env.projectName }}-schematic.pdf
            ${{ env.outputFolder }}/${{ env.projectName }}-documentation.zip
            ${{ env.outputFolder }}/${{ env.projectName }}-JLCPCB.zip

      # Attach the artifacts to the workflow run if this is not a release.
      - name: Attach artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          path: ${{ env.outputFolder }}/
